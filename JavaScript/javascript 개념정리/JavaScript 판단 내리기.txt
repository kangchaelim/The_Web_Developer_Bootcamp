1. 비교 연산자
> greater than
< less than
>= greater than or equal to
<= less than or equal to
== equality
!= not equal
=== strict equality
!== strict non-equality

* == 와 === 차이점
== 는 이중 등호로 두 값이 같은지는 알 수 있으나 타입은 구분하지 않는다.
두 값이 다른 타입이면 같아지도록 강제로 변환한다.
두 값을 비교할 수 있도록 값을 바꾸거나 같은 타입으로 전환해버린다.
ex) 
1 == '1' // true
0 == '' //true
null == undefined // true
0 == false // true

=== 는 삼중등호로 타입을 구분하고 값과 타입 모두 비교한다.
같은 타입으로 변환하는 과정을 거치지 않는다.
1 === '1' // false

2. console.log() 
다른 언어에서는 print라 씀
console.log 는 인수를 콘솔에 출력한다.

3. prompt()
prompt 는 인수를 받아들인다.
무언갈 입력할 수 있는 팝업창이 뜬다.
사용자 입력 값이 필요할 때 알 수 있는 방법
prompt로 입력값을 얻는데 문자열로 받음
parseInt()를 사용하면 문자열이 정수로 바뀌어 나올 수 있음


4. 조건부 네스팅(Nesting)
조건부 안에 조건부

5. Truth-y 값과 False-y 값
truthyness와 falsyness 혹은 Truth-y 값 False-y 값
자바스크립트의 모든 값에는 고유 truthyness와 falsyness가 있다.
단순히 참인지 거짓인지 의미하는 것은 아니다.

false / 0 / ""(empty string) / null / undefined / NaN
이 값을 제외한 모든 값은 truthy이다.

5. 논리함수 AND OR NOT
- AND(&&)
1 <= 4 && 'a' === 'a'; // true
'abc'.length === 3 && 1+1 === 4; // false

둘 중에 하나라도 거짓이면 거짓
true && true // true
true && false // false
false && false // false

ex) 
const password = prompt("Enter your password");
if (password.length >= 6 && password.indexof(' ')=== -1){
    console.log("VALID PASSWORD!")
} else {
    console.log("INCORRECT FORMAT FOR PASSWORD!")
}


- OR(||)
1 !== || 10 === 10 // true
10/2 === 5 || null // true
0 || undefined // false

true || true // true
true || false // true
false || false // false

ex)
const age = 50;
if (age >= 0 && age < 5 || age >= 65) {
    console.log("FREE")
}else if (age >= 5 && age < 10) {
    console.log("$10")
}else if (age >= 10 && age < 65) {
    console.log("$20")
}else {
    console.log("INVALID AGE")
}

두 논리 연산자가 같이 있을 경우 'AND' 가 'OR' 보다 먼저 실행된다.
확실히 하고 싶을 때 먼저 하고 싶은 부분을 괄호() 안에 넣는다.

- NOT(!)
값을 반전시키는 역할
거짓인 표현식 앞에 ! 를 넣으면 결과는 참으로 나옴

!null // true
! (0 === 0) // false
!(3 <= 4) // false

!false // true

ex)
let firstName = prompt("enter your first name");
if (!firstName) {
    firstName = prompt("TRY AGAIN!!!");
}

const age = 50;
if (!(age >= 0 && age < 5 || age >= 65)) {
    console.log("YOU ARE NOT A BABY OR A SENIOR!")



6. Switch 조건문
자주 않쓴다. 주로 if, else if, else 를 씀.
스위치는 기본적으로 일치하는 항목을 찾아 낸다.
일치하는 항목을 찾으면 스위치가 거기서부터 코드를 실행하기 시작한다.
수많은 케이스를 한꺼번에 확일할 때는 편리하지만 우리가 쓰는 대부분의 논리는 이 상황에 들어맞지 않는다.

ex) 
const day = 4;
switch (day) {
    case 1:
        console.log("MONDAY");
    case 2:
        console.log("TUSEDAY");
    case 3:
        console.log("WEDNESDAY");
    case 4:
        console.log("THURSDAY");
    case 5:
        console.log("FRIDAY");
}

// THURSDAY
// FRIDAY

이를 막기 위해 break;를 입력해야 함
기타 값이 입력돼서 아무것도 일치하지 않으면 default

const day = 4;
switch (day) {
    case 1:
        console.log("MONDAY");
        break;
    case 2:
        console.log("TUSEDAY");
        break;
    case 3:
        console.log("WEDNESDAY");
        break;
    case 4:
        console.log("THURSDAY");
        break;
    case 5:
        console.log("FRIDAY");
        break;
    case 6:
    case 7:
        console.log("WEEKEND");
        break;
    default:
        console.log("I DON'T KNOW THAT!")
}

