1. 배열 임의 접근
const days = ["MONDAY", "TUSEDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"];
days[1]; // TUSEDAY
days[0][0]; // M


let firstName = "colt";
firstName[0] = "C";
firstName
// colt

let colors = ["rad", "orange", "yellow"];
colors[0] = "red"
colors
// (3) "red", "orange", "yellow" 

특정 문자를 바꿀 수 없었던 문자열과는 달리 배열에서는 요소를 바꿀 수 있다.

let array = ["red", 70, "yellow"];
array[10] = "indigo";
array
// (11) ["red", 70, "yellow", empty x 7 , "indigo"]
array[5];
// undefined


2. Push / Pop / Shift / Unshift 메서드
Push() - 배열 맨 끝에 요소 추가
Pop() - 배열 맨 끝의 요소 삭제
Shift() - 배열 맨 앞의 요소 제거
Unshift() - 배열 맨 앞에 요소 추가

3. Concat / indexOf / includes / reverse 메서드
Concat() - 2개의 배열을 붙여서 제 3의 배열을 만들어 줌
ex) 
const array1 = [1, 2, 3]
const array2 = [4, 5, 6]
const array3 = array1.concat(array2);
// [1, 2, 3, 4, 5, 6]
includes() - 불리언 메서드. true false로 해당 요소가 들어있는지 안들어있는지 알려줌.
indexOf() - 어떤 요소가 배열에 있는지 없는지 알려줌. 있다면 몇번째에 있는지 알려주고 없다면 -1로 나타냄.
reverse() - 배열을 뒤집어 줌. 파괴 메서드. 


4. Slice / Splice / Sort 메서드
Slice() - 배열의 일부를 복사하는 방법. array.slice(start, end)
ex) 
const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
colors.slice(2,4)
// ['yellow', 'green']
colors.slice(-3)
// ['blue', 'indigo', 'violet']

Splice() - 
ex)
const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
colors.splice(5,1)
// 5번째 인덱스에서 1개를 지워라
// ['red', 'orange', 'yellow', 'green', 'blue', 'violet']

const months = ['Jan', 'March', 'April', 'June']
months.splice(1, 0, 'Feb')
// inserts at index 1
// ['Jan', 'Feb', 'March', 'April', 'June']

months.splice(4, 1, 'May')
// replace 1 element at index 4
// ['Jan', 'Feb', 'March', 'April', 'May']

Sort() - 배열을 줄이는 메서드
숫자 정렬 시 작은 것에서 큰 것으로(첫 번째 숫자 순으로.. 그래서 함수랑 같이 쓰임)
문자열 정렬 시 알파벳 순으로
ex) 
let scores = [1, 70, 100, 2500, 9, -12, 0, 34]
scores.sort()
// [-12, 0, 1, 100, 2500, 34, 70, 9]

5. 참조 타입과 동일성 테스트
'hi' === 'hi
// true
['hi', 'bye'] === ['hi', 'bye']
// false
[1, 2, 3] === [1, 2, 3]
// false

자바스크립트는 배열 안에 있는 것에는 관심이 없다.
컨텐츠를 비교하는 것이 아니라 실제로 비교하는 건 메모리에서 참조되는 값이다.


0.99999999999999999
// 1 
0.9999999999999999
// 0.9999999999999999
자바스크립트에서 작성하는 숫자마다 할당되는 최다 메모리가 있다.
하지만 배열의 경우는 다르다. 열개의 숫자가 있는 배열도 있을 수 있고 1만 개의 숫자를 길게 넣거나 1만 개의 배열을 넣어 많은 공간을 차지할 수 있다. 배열의 저장 방식은 조금 다르다.
let luckNum = 87;
그냥 메모리에서 87로 보이는 것
let luckNums = [2, 345, 23]
컨텐츠는 바뀔 수 있고 얼마나 공간을 차지할 지 모르니까 여기서 저장 되는 것은 참조이다.


[1, 2, 3]
메모리에서 배열을 생성하는 것. 이 배열의 고유한 주소인 참조를 갖는 것.
[1, 2, 3] === [1, 2, 3]
// false
두 개는 차이가 있다. 메모리에서 다른 것을 참조한다.


let nums = [1, 2, 3]
let numsCopy = nums
nums 
// [1, 2, 3]
numsCopy
// [1, 2, 3]
nums === numsCopy
/// true
nums.push(4)
nums
// [1, 2, 3, 4]
numsCopy
// [1, 2, 3, 4]

이중등호와 삼중등호를 통해 같은 참조를 따르는 배열인지 확인해야 한다.

6. 배열 + Const
const는 변하지 않는 값인데 컨텐츠를 바꿔주는 메서드를 써도 될까?

ex)
const array = [1, 2, 3];
array.push(4)
// [1, 2, 3, 4]
array = 1;
// error
array = [1, 2, 3, 4]
// error

=> 컨텐츠를 바꾸는 건 문제 없지만 새로운 참조로 바꿀 시 오류가 생긴다.

7. 다차원 배열
배열 안에 배열 중첩이 가능하다.

const colors = [
    ['red', 'crimson'],
    ['orange', 'dark orange'],
    ['yellow', 'golden rod'],
    ['green', 'olive'],
    ['green', 'navy blue'],
    ['purple', 'orchid']
]
colors[2][1]
// orange


